using BGarden.Application.DTO;
using BGarden.Application.UseCases.Interfaces;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace BGarden.API.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class AuthController : ControllerBase
    {
        private readonly IAuthUseCase _authUseCase;
        private readonly ILogger<AuthController> _logger;

        public AuthController(IAuthUseCase authUseCase, ILogger<AuthController> logger)
        {
            _authUseCase = authUseCase;
            _logger = logger;
        }

        /// <summary>
        /// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        /// </summary>
        [HttpPost("register")]
        public async Task<ActionResult<TokenDto>> Register([FromBody] RegisterDto registerDto)
        {
            try
            {
                // –ü–æ–ª—É—á–∞–µ–º IP-–∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞
                var ipAddress = GetIpAddress();
                
                // –û–±–æ–≥–∞—â–∞–µ–º DTO –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
                registerDto.IpAddress = ipAddress;
                registerDto.UserAgent = Request.Headers["User-Agent"].ToString();
                
                var result = await _authUseCase.RegisterAsync(registerDto);
                
                // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ refresh token –≤ –∫—É–∫–∏
                SetRefreshTokenCookie(result.RefreshToken);
                
                return Ok(result);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {Username}", registerDto.Username);
                return BadRequest(new { message = ex.Message });
            }
        }

        /// <summary>
        /// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        /// </summary>
        [HttpPost("login")]
        public async Task<ActionResult<TokenDto>> Login([FromBody] LoginDto loginDto)
        {
            try
            {
                var ipAddress = GetIpAddress();
                loginDto.IpAddress = ipAddress;
                loginDto.UserAgent = Request.Headers["User-Agent"].ToString();

                var result = await _authUseCase.LoginAsync(loginDto);

                if (result == null)
                {
                    // üî¥ –õ–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã ‚Üí 401
                    return Unauthorized(new { message = "–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å" });
                }

                SetRefreshTokenCookie(result.RefreshToken);
                return Ok(result);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
                return BadRequest(new { message = "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏" });
            }
        }
        /// <summary>
        /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞
        /// </summary>
        [HttpPost("refresh-token")]
        public async Task<ActionResult<TokenDto>> RefreshToken()
        {
            try
            {
                var refreshToken = Request.Cookies["refreshToken"];
                var ipAddress = GetIpAddress();
                
                if (string.IsNullOrEmpty(refreshToken))
                {
                    return BadRequest(new { message = "Refresh token –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç" });
                }
                
                // –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–¥–∞–µ–º token –∏ ipAddress –Ω–∞–ø—Ä—è–º—É—é –≤–º–µ—Å—Ç–æ DTO
                var result = await _authUseCase.RefreshTokenAsync(refreshToken, ipAddress);
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π refresh token –≤ –∫—É–∫–∏
                SetRefreshTokenCookie(result.RefreshToken);
                
                return Ok(result);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {Message}", ex.Message);
                return BadRequest(new { message = "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞" });
            }
        }

        /// <summary>
        /// –í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã
        /// </summary>
        [Authorize]
        [HttpPost("logout")]
        public async Task<IActionResult> Logout()
        {
            try
            {
                var refreshToken = Request.Cookies["refreshToken"];
                
                if (string.IsNullOrEmpty(refreshToken))
                    return BadRequest(new { message = "–¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç" });
                
                await _authUseCase.LogoutAsync(refreshToken);
                
                // –£–¥–∞–ª–µ–Ω–∏–µ –∫—É–∫–∏ —Å refresh token
                Response.Cookies.Delete("refreshToken");
                
                return Ok(new { message = "–í—ã—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω" });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã");
                return BadRequest(new { message = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã" });
            }
        }

        /// <summary>
        /// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–æ–¥–∞ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        /// </summary>
        [HttpPost("verify-2fa")]
        public async Task<ActionResult<TokenDto>> VerifyTwoFactor([FromBody] VerifyTwoFactorDto verifyDto)
        {
            try
            {
                var ipAddress = GetIpAddress();
                
                var result = await _authUseCase.VerifyTwoFactorAsync(
                    verifyDto.Username, 
                    verifyDto.Code, 
                    verifyDto.RememberMe);
                
                // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ refresh token –≤ –∫—É–∫–∏
                SetRefreshTokenCookie(result.RefreshToken);
                
                return Ok(result);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏");
                return BadRequest(new { message = "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è" });
            }
        }

        /// <summary>
        /// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        /// </summary>
        [Authorize]
        [HttpGet("setup-2fa")]
        public async Task<ActionResult<TwoFactorSetupDto>> SetupTwoFactor()
        {
            try
            {
                var username = User.Identity?.Name;
                
                if (string.IsNullOrEmpty(username))
                    return Unauthorized();
                
                var setupData = await _authUseCase.SetupTwoFactorAsync(username);
                return Ok(setupData);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏");
                return BadRequest(new { message = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏" });
            }
        }

        /// <summary>
        /// –í–∫–ª—é—á–µ–Ω–∏–µ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        /// </summary>
        [Authorize]
        [HttpPost("enable-2fa")]
        public async Task<IActionResult> EnableTwoFactor([FromBody] VerifyTwoFactorCodeDto verifyDto)
        {
            try
            {
                var username = User.Identity?.Name;
                
                if (string.IsNullOrEmpty(username))
                    return Unauthorized();
                
                var result = await _authUseCase.EnableTwoFactorAsync(username, verifyDto.Code);
                
                if (!result)
                    return BadRequest(new { message = "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è" });
                
                return Ok(new { message = "–î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω–∞" });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏");
                return BadRequest(new { message = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏" });
            }
        }

        /// <summary>
        /// –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        /// </summary>
        [Authorize]
        [HttpPost("disable-2fa")]
        public async Task<IActionResult> DisableTwoFactor([FromBody] VerifyTwoFactorCodeDto verifyDto)
        {
            try
            {
                var username = User.Identity?.Name;
                
                if (string.IsNullOrEmpty(username))
                    return Unauthorized();
                
                var result = await _authUseCase.DisableTwoFactorAsync(username, verifyDto.Code);
                
                if (!result)
                    return BadRequest(new { message = "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è" });
                
                return Ok(new { message = "–î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞" });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏");
                return BadRequest(new { message = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏" });
            }
        }

        /// <summary>
        /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        /// </summary>
        [Authorize]
        [HttpGet("auth-history")]
        public async Task<ActionResult<IEnumerable<AuthLogDto>>> GetAuthHistory()
        {
            try
            {
                var username = User.Identity?.Name;
                
                if (string.IsNullOrEmpty(username))
                    return Unauthorized();
                
                var history = await _authUseCase.GetAuthHistoryAsync(username);
                return Ok(history);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏");
                return BadRequest(new { message = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏" });
            }
        }

        /// <summary>
        /// –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
        /// </summary>
        [Authorize(Roles = "Admin")]
        [HttpPost("unlock-user/{username}")]
        public async Task<IActionResult> UnlockUser(string username)
        {
            try
            {
                var result = await _authUseCase.UnlockUserAsync(username);
                
                if (!result)
                    return NotFound(new { message = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
                
                return Ok(new { message = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
                return BadRequest(new { message = "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" });
            }
        }

        #region Helper Methods
        
        private string GetIpAddress()
        {
            // –ü–æ–ª—É—á–∞–µ–º IP –∞–¥—Ä–µ—Å –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ X-Forwarded-For (–µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –∏–¥–µ—Ç —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏)
            // –∏–ª–∏ –∏–∑ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
            if (Request.Headers.ContainsKey("X-Forwarded-For"))
                return Request.Headers["X-Forwarded-For"];
            
            return HttpContext.Connection.RemoteIpAddress?.MapToIPv4().ToString() ?? "0.0.0.0";
        }
        
        private void SetRefreshTokenCookie(string token)
        {
            var cookieOptions = new CookieOptions
            {
                HttpOnly = true,
                Expires = DateTime.UtcNow.AddDays(7),
                SameSite = SameSiteMode.Strict,
                Secure = true // –≤ –ø—Ä–æ–¥–∞–∫—à–Ω –æ–∫—Ä—É–∂–µ–Ω–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å true
            };
            
            Response.Cookies.Append("refreshToken", token, cookieOptions);
        }
        
        #endregion
    }
    
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ DTO
    public class VerifyTwoFactorDto
    {
        public string Username { get; set; }
        public string Code { get; set; }
        public bool RememberMe { get; set; }
    }
    
    public class VerifyTwoFactorCodeDto
    {
        public string Code { get; set; }
    }
} 